import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.EmptyStackException;


public class ConverterGUI extends JFrame {
    private JPanel mainPanel;
    private JTextField expressionTextField;
    private JTextField resultTextField;
    private JButton prefixButton;
    private JButton postfixButton;
    private JLabel expressionLabel;
    private JLabel resultLabel;

    public ConverterGUI(String title) {
        super(title);

        $$$setupUI$$$();
        this.setPreferredSize(new Dimension(300, 400));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainPanel);
        this.pack();
        prefixButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "The prefix button was clicked.");

                //grab the text from prefix
                String prefixExp = expressionTextField.getText();
                JOptionPane.showMessageDialog(null, "The prefix expression is " + prefixExp);
                //convert to postfix
                String postfixExp = prefixToPostfix(prefixExp);
                JOptionPane.showMessageDialog(null, "The postfix expression is " + postfixExp);
                //update the info
                resultTextField.setText(postfixExp);
                JOptionPane.showMessageDialog(null, "The result text field has been set.");
            }
        });
        postfixButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //grab the text from prefix
                String postfixExp = expressionTextField.getText();
                JOptionPane.showMessageDialog(null, "The postfix expression is " + postfixExp);
                //convert to postfix
                String prefixExp = postfixToPrefix(postfixExp);
                JOptionPane.showMessageDialog(null, "The prefix expression is " + prefixExp);
                //update the info
                resultTextField.setText(prefixExp);
                JOptionPane.showMessageDialog(null, "The result text field has been set.");
            }
        });
    }

    public static void main(String[] args) {
        JFrame frame = new ConverterGUI("Guli's Expression Converter");
        frame.setVisible(true);
    }

    public static String prefixToPostfix(String text) {
        //tokenize the string
        List<String> tokens = tokenizeText(text);

        //whiel there are more tokens, push them all onto the reversal stack
        Stack<String> reverse = new Stack<String>();
        Stack<String> operands = new Stack<String>();
        while (tokens.size() > 0) {
            reverse.push(tokens.remove(0));//extracts the first item from the list, pushes it into the stack
        }

        //while the reversal stack is not empty:
        while (!reverse.empty()) {
            //pop the next token from the reversal stack
            String token;
            try {
                token = reverse.pop();
            } catch (EmptyStackException e) {
                throw new SyntaxError();
            }

            //if it is an operand, push it onto the operand stack
            if (isOperand(token)) { //need to write this !
                //...need an operand stack...
                operands.push(token);
            }
            //else it is an operator
            else {
                //pop two operands off of the operand stack
                String op1 = operands.pop();
                String op2 = operands.pop();
                //create a string with the two operands followed the operator
                String combined = op1 + " " + op2 + " " + token; //token is the operator
                //push that string onto the operand stack
                operands.push(combined);
            }
        }
        ///reversal is now empty;
        //pop the postfix expression off the stack
        return operands.pop();
    }

    public static String postfixToPrefix(String text) {
        List<String> tokens = tokenizeText(text);
        return "";
    }

    private static List<String> tokenizeText(String rawText) {
        //Write this later! Take the user's provided text and break it into numbers and operators
        List<String> list = new ArrayList<String>();
        return list;

    }

    private static boolean isOperand(String token) {
        //Write this! need to test the string to see if it's an operand; return true if it is, false if it isn't
        return false;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */

    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(9, 3, new Insets(0, 0, 0, 0), 30, 30, true, true));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 9, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        expressionLabel.setText("Enter Expression");
        mainPanel.add(expressionLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0), 0, false));
        expressionTextField = new JTextField();
        expressionTextField.setText("");
        mainPanel.add(expressionTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0), 0, false));
        prefixButton = new JButton();
        prefixButton.setText("Prefix to Postfix");
        mainPanel.add(prefixButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0), 0, false));
        postfixButton.setText("Postfix to Prefix");
        mainPanel.add(postfixButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0), 0, false));
        resultTextField = new JTextField();
        resultTextField.setText("");
        mainPanel.add(resultTextField, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 1), new Dimension(0, 1), 0, false));
        final JLabel label1 = new JLabel();
        label1.setEnabled(true);
        label1.setText("Result");
        mainPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(0, 0), new Dimension(0, 0), new Dimension(0, 0), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    public static class SyntaxError extends RuntimeException {

    }
}